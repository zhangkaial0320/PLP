
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;
import cop5556sp17.PLPRuntimeLog;
import java.lang.Thread;


public class CodeGenVisitorTest 
{

	static final boolean doPrint = true;
	static void show(Object s) 
	{
		if (doPrint) 
		{
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
    public void initLog()
    {
        if (devel || grade) 
            PLPRuntimeLog.initLog();
    }
    
    public void printLog()
    {
        System.out.println(PLPRuntimeLog.getString());
    }
	//@Test
	public void TestFrame() throws Exception 
	{
		//scan, parse, and type check the program
        initLog();
		String progname = "emptyProg";
		String input = "ClassA url u\n"+
                        "{\n"+
                        "   image i1\n"+
                        "   frame f\n"+
                        "   integer x	\n"+
                        "   integer y	\n"+
						"	u->i1->f->show->hide->move(200,300); \n"+
						"	f->xloc->x; \n"+
						"	f->yloc->y; \n"+
                        "} \n";
		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		
		//generate code
		
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		 byte[] bytecode = (byte[]) program.visit(cv, null);
		// show(bytecode);

		//output the generated bytecode
		//CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();

		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = {"http://harn.ufl.edu/sites/default/files/summerartcamp2016.jpg"}; //create command line argument array to initialize params, none in this case
		//String[] args = {"test3.jpg","test.jpg","test4.jpg"};
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
        printLog();
	}
	
	@Test
	public void TestImageOp() throws Exception 
	{
		//scan, parse, and type check the program
        initLog();
		String progname = "emptyProg";
		String input = "ClassA url u, file f, integer x\n"+
                        "{\n"+
                        "   image i1	\n"+
                        "   image i2	\n"+
                        "   u->i1->i2;	\n"+
                        "	if(x == 1)	\n"+
                        "	{\n"+
                       "		i1 <-i1+i2; \n"+
                       "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 2)	\n"+
                        "	{\n"+
                        "		i1 <- i1-i2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 3)	\n"+
                        "	{\n"+
                        "		i1 <- i1*2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 4)	\n"+
                        "	{\n"+
                        "		i1 <- i1/2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 5)	\n"+
                        "	{\n"+
                        "		i1 |-> gray ->i2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 6)	\n"+
                        "	{\n"+
                        "		i1 |-> convolve ->i2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 7)	\n"+
                        "	{\n"+
                        "		i1 |-> blur ->i2; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "	if(x == 8)	\n"+
                        "	{\n"+
                        "		i1 <- i1%251; \n"+
                        "		i1->f;		\n"+
                        "	}\n"+
                        "} \n";
		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		//show(program);
		
		//generate code
		
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		 byte[] bytecode = (byte[]) program.visit(cv, null);
		// show(bytecode);

		//output the generated bytecode
		//CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();

		String classFileName = name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		
		
		String[] args = {"http://harn.ufl.edu/sites/default/files/summerartcamp2016.jpg","test.jpg","1"}; //create command line argument array to initialize params, none in this case
		//String[] args = {"test3.jpg","test.jpg","test4.jpg"};
		
		for(int i=1;i<=8;i++)
		{
			args[2] = Integer.toString(i);
			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
			instance.run();
		}
        printLog();
	}
	
	@Test
	 public void emptyProg1() throws Exception 
	 {
	 	//scan, parse, and type check the program
		initLog();
	 	String progname = "emptyProg";
		String input = "emptyProg1 "
	   					+ "integer a, "//scope 1
                         + "integer b, " //scope 1       
                         + "integer c, "
                         + "boolean bool0 "
                     + "{"
                             + " a <- 4; "
                             + " b <- 5;"
                             + " boolean boolA "// scope 2 , slot 1
                             + " boolean boolB "// scope 2 , slot 2
                             + " boolA <- true; "
                             + " boolB <- false; "
                             + " if(boolA == true) "
                             + " {"
                                     + "boolean a "         // scope 3, slot 3
                                     + "a <- boolA; "       // a = true
                                     + "bool0 <- false;"    // bool0 = false;
                                 + "while(a != boolB)"
                                 + "{"
                                     + "integer d  "// slot 4
                                     + "integer e "// slot 5
                                     + "c <- 3 + 5; " // c = 8
                                     + "d <- 10 - 1; "// d = 9
                                     + "c <- c * d; "// c = 72
                                     + "e <- d / 3; "// e = 3                                    
                                         + "a <- boolB;" // a <- false
                                         + "if(c > d) "
                                         + "{ "
                                         + "    c <- d; " // c= 9
                                         + "    if(c <= d) "
                                         + "    {"
                                         + "        boolA <- false;"// boolA = false
                                         + "    }"
                                         + "    if(boolA < boolB) "
                                         + "    {"
                                         + "        c <- 0;"// doesn't print out
                                         + "    }"
                                         + "}"
                                 + "}"
                         + " } "
                         + "if(c >= 1) "
                         + "{ "
                         + "    boolB <- bool0 | true;"// boolB = true
                         + "}"
                             + " a <- 7;" // slot -1
                         + "}";		
	 	Scanner scanner = new Scanner(input);
	 	scanner.scan();
	 	Parser parser = new Parser(scanner);
	 	ASTNode program = parser.parse();
	 	TypeCheckVisitor v = new TypeCheckVisitor();
	 	program.visit(v, null);
	 	//show(program);
		
	 	//generate code
		
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	 	 byte[] bytecode = (byte[]) program.visit(cv, null);
	 	// show(bytecode);

	 	//output the generated bytecode
	 	//CodeGenUtils.dumpBytecode(bytecode);
		
	 	//write byte code to file 
	 	String name = ((Program) program).getName();

	 	String classFileName = "bin/" + name + ".class";
	 	OutputStream output = new FileOutputStream(classFileName);
	 	output.write(bytecode);
	 	output.close();
	 	System.out.println("wrote classfile to " + classFileName);
		
	 	// directly execute bytecode
	 	String[] args = {"0","0","0","false"}; //create command line argument array to initialize params, none in this case
	 	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	 	instance.run();
	 	printLog();
	 }
	@Test
	 public void emptyProg2() throws Exception 
	 {
	 	//scan, parse, and type check the program
		initLog();
	 	String progname = "emptyProg";
	 	String input = progname + 
	 			"  integer y "
	 			+ "{ integer x"
	 			+ "	x <- 6;"
	 			+ "	y <- x + 1;"
	 			+ " 	while(x >= 2) {  "
	 			+ "		x <- x - 1;"
	 			+ "	}" 
	 			+ "}";		
	 	Scanner scanner = new Scanner(input);
	 	scanner.scan();
	 	Parser parser = new Parser(scanner);
	 	ASTNode program = parser.parse();
	 	TypeCheckVisitor v = new TypeCheckVisitor();
	 	program.visit(v, null);
	 	//show(program);
		
	// 	//generate code
		
	 	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	 	 byte[] bytecode = (byte[]) program.visit(cv, null);
	 	// show(bytecode);

	// 	//output the generated bytecode
	// 	//CodeGenUtils.dumpBytecode(bytecode);
		
	 	//write byte code to file 
	 	String name = ((Program) program).getName();

	 	String classFileName = "bin" + name + ".class";
	 	OutputStream output = new FileOutputStream(classFileName);
	 	output.write(bytecode);
	 	output.close();
	 	System.out.println("wrote classfile to " + classFileName);
		
	 	// directly execute bytecode
	 	String[] args = {"0"}; //create command line argument array to initialize params, none in this case
	 	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	 	instance.run();
	 	printLog();
	 }
	@Test
	 public void emptyProg3() throws Exception 
	 {
	 	//scan, parse, and type check the program
		initLog();
		String lineSep = "\n";
        String progname = "completeProg ";
        String input = progname+ " integer x, integer y, integer z, boolean bool_1, boolean bool_2 "+
         				  "{ " + lineSep +
                               "x <- 100; " + lineSep +
                               "y <- x / 3 * (x % 33 + 1); " + lineSep +
                               "z <- y; " + lineSep +
                               "bool_1 <- false; " + lineSep +
                               "bool_2 <- true; " + lineSep +
                               "integer y " + lineSep + // new local var y
                               "y <- z + 20; " + lineSep +
                               "z <- y; " + lineSep +
                               "if(bool_2)" +
                               "{ " + lineSep + // should enter
                                   "boolean bool_1 " + lineSep + // new local var bool_1
                                   "bool_1 <- bool_2 & true; " + lineSep + // now local var bool_1 is true
                               "} " + lineSep + // end scope
                               "if(bool_1) "+
                               "{ " + lineSep + // bool_1 now is paramDec, should be false, should not enter if statement
                                   "integer err " + lineSep +
                                   "err <- 2333; " + lineSep +
                               "} " + lineSep +
                               "integer pass_token " + lineSep +
                               "pass_token <- 0; " + lineSep +
                               "while(pass_token != 4) "+
                               "{ " + lineSep + // should enter 4 if statement, while should loop only once
                                   "integer local_1 " + lineSep +
                                   "integer local_2 " + lineSep +
                                   "local_1 <- 45; " + lineSep +
                                   "local_2 <- 46; " + lineSep +
                                   // check all boolena ops
                                   "if(local_1 != local_2) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if(local_1 == local_2) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if(local_1 > local_2) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if(local_1 >= 45) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if(local_1 < local_2) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if(46 <= local_2) {pass_token <- pass_token + 1;} " + lineSep +
                                   "if((local_1 > local_2)|false) {pass_token <- pass_token + 1;} " + lineSep +
                               "} " + lineSep +
                           "} ";		
	 	Scanner scanner = new Scanner(input);
	 	scanner.scan();
	 	Parser parser = new Parser(scanner);
	 	ASTNode program = parser.parse();
	 	TypeCheckVisitor v = new TypeCheckVisitor();
	 	program.visit(v, null);
	 	//show(program);
		
	// 	//generate code
		
	 	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	 	byte[] bytecode = (byte[]) program.visit(cv, null);
	 	// show(bytecode);

	// 	//output the generated bytecode
	// 	//CodeGenUtils.dumpBytecode(bytecode);
		
	// 	//write byte code to file 
	 	String name = ((Program) program).getName();

	 	String classFileName = "bin" + name + ".class";
	 	OutputStream output = new FileOutputStream(classFileName);
	 	output.write(bytecode);
	 	output.close();
	 	System.out.println("wrote classfile to " + classFileName);
		
	 	// directly execute bytecode
	 	String[] args = {"0","0","0","false","false"}; //create command line argument array to initialize params, none in this case
	 	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	 	instance.run();
	 	printLog();
	 }
}

